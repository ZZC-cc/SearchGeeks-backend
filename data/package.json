{
  "code": 0,
  "data": {
    "records": [
      {
        "id": "1655430928463335425",
        "title": "大三-java-日常实习",
        "description": null,
        "content": "<p style=\"text-align:start;\" size=\"0\" _root=\"undefined\" __ownerID=\"undefined\" __hash=\"undefined\" __altered=\"false\">现状：刚改完一次简历，之前的简历出去投没有收获一次面试机会。所以停了大半个月学了伙伴匹配系统。</p><p></p><p>未来打算：</p><ol><li>算法我报了代码随想录的训练营，10号开始下一步打算跟着走。</li><li>打算把面试题，知识体系，查漏补缺一下；</li><li>学一些前端，争取早日掌握从 0 到 1 的 做项目的技能；</li></ol><p>希望：</p><ol><li>鱼皮哥给点未来打算的建议。</li><li>如何锻炼从 0 到 1 做项目的能力</li></ol><p style=\"text-align:start;text-indent:2em;\"></p><p>祝福语：祝鱼皮哥创业越来越顺利，财源广进，希望有天能给鱼皮哥打工嘻嘻。</p>",
        "category": "简历",
        "cover": null,
        "language": null,
        "viewNum": 12,
        "thumbNum": 2,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1614501753724600321",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-05-08T04:34:24.000+00:00",
        "updateTime": "2023-05-08T08:38:44.000+00:00",
        "user": {
          "id": "1614501753724600321",
          "planetCode": "16626",
          "userName": "辉",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/0gLGYWxmdiayZWAicGBexPAAViaBVRSaoQBibaXicRBQMia1jIM7yTxroJiabAnJbdtvNHWxDoI8u4wNMia33QS4OZmfFg/132",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 100,
          "followeeNum": 0,
          "followNum": 1,
          "followStatus": null,
          "vipExpireTime": "2024-02-04T14:32:16.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-01-15T05:56:28.000+00:00",
          "updateTime": "2023-04-14T14:42:15.000+00:00"
        },
        "tags": [
          "简历"
        ],
        "fileList": [],
        "videoList": [],
        "atUserList": [
          "1601072287388278786"
        ],
        "pictureList": [],
        "hasThumb": false,
        "hasFavour": false,
        "needVip": true,
        "atUserVOList": null
      },
      {
        "id": "1655398030397968386",
        "title": "一年工作经验-Java-社招",
        "description": null,
        "content": "<p>蟹老板您好。</p><p>我是22届毕业的，实际工作经验接近一年（10个月），对现薪资不满意准备跳槽，四月大概投过300份简历（坐标成都），均无回音，个人感觉是工作经历描述板块有较大问题，想修改却无从下手，希望蟹老板能指导一下，万分感谢！</p>",
        "category": "简历",
        "cover": null,
        "language": null,
        "viewNum": 17,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1642539916191649793",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-05-08T02:23:40.000+00:00",
        "updateTime": "2023-05-08T08:39:25.000+00:00",
        "user": {
          "id": "1642539916191649793",
          "planetCode": "14906",
          "userName": "HYTZ",
          "userAvatar": null,
          "gender": 1,
          "userProfile": "coding不足两年半的码农",
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": "",
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 1,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-04-01T23:47:36.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-04-02T14:50:07.000+00:00",
          "updateTime": "2023-05-05T09:27:37.000+00:00"
        },
        "tags": [
          "简历"
        ],
        "fileList": [],
        "videoList": [],
        "atUserList": [
          "1601072287388278786"
        ],
        "pictureList": [
          "https://pic.code-nav.cn/post_picture/1601072287388278786/pIFBJlQA-vip_image_placeholder.png"
        ],
        "hasThumb": false,
        "hasFavour": false,
        "needVip": true,
        "atUserVOList": null
      },
      {
        "id": "1655270506770763778",
        "title": "代理模式",
        "description": null,
        "content": "一、代理模式介绍\n代理模式在不改变原始代理类的情况下，通过引入代理类来给原始类附加功能。\n代理模式的主要结构如下：\n\n1. Subject：抽象主题类，通过接口或抽象类声明主题和代理对象实现的业务方法\n2. RealSubject：真实主题类，实现Subject中的具体业务，是代理对象所代表的真实对象\n3. Proxy：代理类，其内部含有对真实主题的引用，它可以访问、控制或扩展RealSubject的功能\n4. Client：客户端，通过使用代理类来访问真实的主题类按照上面的类图，可以实现如下代码：\n\n```java\n//主题类接口\npublic interface Subject {\n    void Request();\n}\n\n//真实的主题类\npublic class RealSubject implements Subject{\n\n    @Override\n    public void Request() {\n        System.out.println(\"我是真实的主题类\");\n    }\n}\n\n//代理类\npublic class Proxy implements Subject{\n\n    private RealSubject realSubject;\n\n    @Override\n    public void Request() {\n        if (realSubject == null) {\n            realSubject = new RealSubject();\n        }\n        realSubject.Request();\n    }\n}\n\n//客户端\npublic class Client {\n    public static void main(String[] args) {\n        Proxy proxy = new Proxy();\n        proxy.Request();\n    }\n}\n\n```\n代理模式有比较广泛的使用，比如Spring AOP、RPC、缓存等。在 Java 中，根据代理的创建时期，可以将代理模式分为静态代理和动态代理，下面就来分别阐述。\n\n二、代理模式实现\n动态代理和静态代理的区分就是语言类型是在运行时检查还是在编译期检查。\n\n2.1 静态代理\n\n静态代理是指在编译期，也就是在JVM运行之前就已经获取到了代理类的字节码信息。即Java源码生成.class文件时期。\n由于在JVM运行前代理类和真实主题类已经是确定的，因此也被称为静态代理。\n在实际使用中，通常需要定义一个公共接口及其方法，被代理对象（目标对象）与代理对象一起实现相同的接口或继承相同的父类。\n2.2 动态代理\n\n动态代理，也就是在JVM运行时期动态构建对象和动态调用代理方法。常用的实现方式是反射。反射机制是指程序在运行期间可以访问、检测和修改其本身状态或行为的一种能力，使用反射我们可以调用任意一个类对象，以及其中包含的属性及方法。比如JDK Proxy。\n此外动态代理也可以通过ASM(Java 字节码操作框架)来实现。比如CGLib。\n2.2.1 JDK Proxy\n\n这种方式是JDK自身提供的一种方式，它的实现不需要引用第三方类，只需要实现InvocationHandler接口，重写invoke()方法即可。代码实现如下所示：\n\n```java\npublic class ProxyExample {\n\n    static interface Car {\n        void running();\n    }\n    static class Bus implements Car {\n        @Override\n        public void running() {\n            System.out.println(\"bus is running\");\n        }\n    }\n    static class Taxi implements Car {\n        @Override\n        public void running() {\n            System.out.println(\"taxi is runnig\");\n        }\n    }\n\t//核心部分 JDK Proxy 代理类\n    static class JDKProxy implements InvocationHandler {\n        private Object target;\n\n        public Object getInstance(Object target) {\n            this.target = target;\n            //获得代理对象\n            return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this);\n         }\n\n        @Override\n        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n            Object result = method.invoke(target, args);\n            return result;\n        }\n    }\n\n    public static void main(String[] args) {\n        JDKProxy jdkProxy = new JDKProxy();\n        Car instance = (Car) jdkProxy.getInstance(new Taxi());\n        instance.running();\n    }\n}\n\n```\n实际上是通过invoke()方法来触发代理的执行方法。最终使得实现Invocation接口的类具有动态代理的能力。动态代理的好处在于不需要和静态代理一样提前写好公共的代理接口，只需要实现Invocation接口就可拥有动态代理能力。\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 12,
        "thumbNum": 1,
        "favourNum": 1,
        "commentNum": 0,
        "priority": 0,
        "userId": "1626573802076938242",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-05-07T17:56:56.000+00:00",
        "updateTime": "2023-05-08T06:41:44.000+00:00",
        "user": {
          "id": "1626573802076938242",
          "planetCode": "921",
          "userName": "西索",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1626573802076938242/8ZCC2h4C-13B2C2F8-32C4-43B3-903F-DA7010F69D7B.jpeg",
          "gender": 1,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 1,
          "followStatus": null,
          "vipExpireTime": "2024-02-17T14:16:04.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-02-17T13:26:29.000+00:00",
          "updateTime": "2023-03-05T05:04:01.000+00:00"
        },
        "tags": [
          "文章"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1655219786113650690",
        "title": "新人加入",
        "description": "自我介绍",
        "content": "   一个刚毕业一年的Java后端程序员，分享一下自己工作经历，希望能给大家做为一个参考。\n   毕业时面试上我家这边现在我所在的公司，然后被派往了贵阳作为甲方在外包的公司做一名后端开发，面试时说的会有人带，但是真正进入后组长的态度是当看不见，只有一位老大哥在我有问题时会帮我，但是也只限于当时遇到的问题。项目方面除了那位老大哥会给我讲述一下，其余的组长根本就不理会我，偶尔会让我跟着写写项目，但是一旦有错误或者写的不对了就会让我停下，他自己去写，这一年过的很辛苦，学不到项目上的东西，只能看看B站上的项目视频，自己做一做，要不然只能自己拉代码下来自己研究。也和东家反应过，但是并没有效果。后面技术总监看我实在没事，就让我自己研究爬虫，对app和网站的数据进行爬取，到后面自己将项目布置到服务器上，都靠着的百度、csdn、博客等网站进行学习后将项目完成。我有时也很迷茫，做这些对我未来真的有帮助吗？今年投简历回复的也很少，现在正在学习着鱼老板分享的项目，希望加在简历上之后能够得到更多的回复吧。最后我想说的是遇到这种派去外包公司的公司还是早点离开为好，不然可能会像我一样郁郁寡欢。\n   爬虫方面的经验也会在后面分享给大家。",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 14,
        "thumbNum": 2,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1653409104980389889",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-05-07T14:35:24.000+00:00",
        "updateTime": "2023-05-08T06:33:21.000+00:00",
        "user": {
          "id": "1653409104980389889",
          "planetCode": "21436",
          "userName": "无名",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1653409104980389889/vfNjiMPg-微信图片_20230507223915.jpg",
          "gender": 1,
          "userProfile": "总是希望找出最优解。",
          "userRole": "vip",
          "interests": [
            "面试题",
            "GitHub",
            "书籍",
            "资源",
            "工具",
            "教程",
            "项目",
            "B站",
            "Java",
            "Java 基础",
            "Javascript",
            "后端",
            "文档",
            "简历",
            "开源",
            "面试",
            "框架",
            "算法",
            "面试题挑战",
            "文章",
            "综合门户",
            "信息安全",
            "数据库",
            "软件",
            "插件",
            "自我介绍",
            "Linux",
            "阿里",
            "腾讯",
            "百度",
            "操作系统",
            "面经",
            "数据",
            "组件库",
            "HTML",
            "编程",
            "大数据",
            "Redis",
            "NodeJS",
            "开发",
            "求职",
            "博客",
            "小程序",
            "API接口",
            "类库",
            "系统",
            "效率",
            "数据结构",
            "Apache",
            "京东",
            "SQL",
            "分布式",
            "MySQL",
            "Gitee",
            "笔记",
            "学习路线",
            "模板",
            "练习",
            "设计模式",
            "云服务",
            "学习建议",
            "内推",
            "谷歌",
            "CSDN",
            "英语",
            "格式转换",
            "可视化",
            "招聘",
            "Spring",
            "微服务",
            "创作者",
            "正则表达式",
            "技术团队",
            "论文",
            "建站",
            "区块链",
            "APP",
            "加密转码",
            "云原生",
            "架构",
            "爬虫",
            "计算机基础",
            "服务器",
            "阿里巴巴",
            "性能",
            "开源中国",
            "面试题解",
            "翻译",
            "Bootstrap",
            "知乎",
            "开发规范",
            "JSON",
            "LeetCode",
            "代码托管",
            "数据科学",
            "镜像",
            "问答",
            "1年工作经验",
            "多线程",
            "JVM"
          ],
          "place": "贵阳",
          "birthday": "1998-08-19",
          "school": "大连交通大学",
          "major": "软件工程",
          "education": "本科",
          "graduationYear": 2022,
          "jobStatus": "已工作",
          "company": null,
          "job": "后端",
          "workYear": 1,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 10,
          "coin": 100,
          "followeeNum": 0,
          "followNum": 1,
          "followStatus": null,
          "vipExpireTime": "2024-05-06T08:11:59.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-05-02T14:40:24.000+00:00",
          "updateTime": "2023-05-07T14:55:24.000+00:00"
        },
        "tags": [
          "文章",
          "自我介绍",
          "爬虫"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1655150193198272513",
        "title": "大三-Java-暑假实习简历",
        "description": null,
        "content": "<p>普通二本，打算在暑假前找份实习工作，希望帮忙改下简历，谢谢</p>",
        "category": "简历",
        "cover": null,
        "language": null,
        "viewNum": 19,
        "thumbNum": 2,
        "favourNum": 0,
        "commentNum": 1,
        "priority": 0,
        "userId": "1646547454570582017",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-05-07T09:58:51.000+00:00",
        "updateTime": "2023-05-08T08:29:49.000+00:00",
        "user": {
          "id": "1646547454570582017",
          "planetCode": "11577",
          "userName": "Yet",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/2ibKI1Ejs4NYuJnvaNEAHwL8npc5iapsBCB8kbmkN9mZaJdmwibQ9wz5d4vFjor7sUgY2ztaIZZicEEL8BRStYmUpg/132",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": null,
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-04-13T05:50:37.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-04-13T16:14:39.000+00:00",
          "updateTime": "2023-04-14T05:50:37.000+00:00"
        },
        "tags": [
          "简历"
        ],
        "fileList": [],
        "videoList": null,
        "atUserList": [
          "1601072287388278786"
        ],
        "pictureList": [
          "https://pic.code-nav.cn/post_picture/1601072287388278786/pIFBJlQA-vip_image_placeholder.png"
        ],
        "hasThumb": false,
        "hasFavour": false,
        "needVip": true,
        "atUserVOList": null
      },
      {
        "id": "1655081409770983426",
        "title": "研二-Java后端实习简历",
        "description": null,
        "content": "<p>双非本、211硕，计划先找中小厂实习，希望皮总给点意见</p><p><span style=\"color:#000000\"><span style=\"font-size:15px\"><span style=\"background-color:#ffffff\">一些疑惑：</span></span></span></p><p><span style=\"color:#000000\"><span style=\"font-size:15px\"><span style=\"background-color:#ffffff\">1、技术栈部分会不会篇幅大了，有些技术其实在下面的项目中没有体现， 比如JVM。</span></span></span></p><p><span style=\"color:#000000\"><span style=\"font-size:15px\"><span style=\"background-color:#ffffff\">2、关于项目，第一个项目是实验室和一博物院合作的，之后要给他们上线，没有办法提供访问链接。目前正在尝试自己将第二个项目上线。</span></span></span></p><p><span style=\"color:#000000\"><span style=\"font-size:15px\"><span style=\"background-color:#ffffff\">这两个项目的技术其实还是有重复的，是否需要之后换掉一个项目或者扩充一些技术进去。</span></span></span></p><p><span style=\"color:#000000\"><span style=\"font-size:15px\"><span style=\"background-color:#ffffff\">3、想问一下实习的建议，我们实验室情况比较麻烦，老师不给放实习，现在只能偷摸去或者等到暑假。</span></span></span></p>",
        "category": "简历",
        "cover": null,
        "language": null,
        "viewNum": 37,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 1,
        "priority": 0,
        "userId": "1650154338800152578",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-05-07T05:25:32.000+00:00",
        "updateTime": "2023-05-08T07:26:56.000+00:00",
        "user": {
          "id": "1650154338800152578",
          "planetCode": "20543",
          "userName": "岂几",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/7YlUONB49eadvE7mzShkzKWgUAd3SlpnoTsk0QzbLSRPiazBw0OGwSxFmGmc8y7bQVgHcjicLZLvc6XiaV8fldD1Q/132",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": null,
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-05-04T02:54:49.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-04-23T15:07:07.000+00:00",
          "updateTime": "2023-05-05T02:54:49.000+00:00"
        },
        "tags": [
          "简历",
          "Java",
          "实习",
          "研二"
        ],
        "fileList": [],
        "videoList": null,
        "atUserList": [
          "1601072287388278786"
        ],
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": true,
        "atUserVOList": null
      },
      {
        "id": "1655045746224828418",
        "title": "研一-Java后端-实习简历",
        "description": null,
        "content": "<p>211本美研，计划五月找中小厂实习，请鱼皮哥斧正。（简历原版是有分割线的，脱敏处理的时候不知道为啥删了）</p><p>以下是我的一些疑惑：</p><p>1. 有必要删除第三个项目或者简化项目描述，添加技术能力描述吗？</p><p>2. 写的内容是否过于同质化，不够有吸引力？</p><p>3. 投实习的建议？</p>",
        "category": "简历",
        "cover": null,
        "language": null,
        "viewNum": 24,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 1,
        "priority": 0,
        "userId": "1627792282667208705",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-05-07T03:03:49.000+00:00",
        "updateTime": "2023-05-08T07:15:45.000+00:00",
        "user": {
          "id": "1627792282667208705",
          "planetCode": "17139",
          "userName": "368",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/icZVnnp6DSAeToHS4DzLBYMIm1qasELS9mnWVMmdyUoEZCjv2cTOrX1hmicrltYRtU4RRMBPicMkIjsic7PjhaxerQ/132",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": null,
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-02-21T22:33:03.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-02-20T22:08:17.000+00:00",
          "updateTime": "2023-02-21T22:33:02.000+00:00"
        },
        "tags": [
          "简历",
          "Java",
          "实习",
          "研一"
        ],
        "fileList": [],
        "videoList": null,
        "atUserList": [
          "1601072287388278786"
        ],
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": true,
        "atUserVOList": null
      },
      {
        "id": "1654675249574219777",
        "title": "大三 前端 实习简历",
        "description": null,
        "content": "<p>鱼皮大佬，麻烦帮我看看简历</p><p>1.我想知道自己需不需要添加别的类型的项目，投了好多简历但没有后续，总觉得是不是自己的简历不太好，但改来改去又没有很大的变化</p><p>2.需不需要再多学一些技术，我看到有一些岗位要求有微信小程序之类的</p>",
        "category": "简历",
        "cover": null,
        "language": null,
        "viewNum": 36,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 1,
        "priority": 0,
        "userId": "1629002512990240769",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-05-06T02:31:36.000+00:00",
        "updateTime": "2023-05-08T05:46:58.000+00:00",
        "user": {
          "id": "1629002512990240769",
          "planetCode": "13298",
          "userName": "呐",
          "userAvatar": "https://thirdwx.qlogo.cn/mmopen/vi_32/EhQCxJRge5ciaJNfFhicuKrqgLcTuJ5JJzTX7ZylLH56AD7BEXAzpdOkMRdyYiaIicuUdDGmwE9u9Xibj6cxeyxrIgg/132",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": null,
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": null,
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-02-24T15:12:33.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-02-24T06:17:19.000+00:00",
          "updateTime": "2023-02-24T15:12:33.000+00:00"
        },
        "tags": [
          "简历",
          "大三",
          "前端",
          "实习"
        ],
        "fileList": [],
        "videoList": [],
        "atUserList": [
          "1601072287388278786"
        ],
        "pictureList": [
          "https://pic.code-nav.cn/post_picture/1601072287388278786/pIFBJlQA-vip_image_placeholder.png"
        ],
        "hasThumb": false,
        "hasFavour": false,
        "needVip": true,
        "atUserVOList": null
      },
      {
        "id": "1654479920002281473",
        "title": "整合SpringSecurity自定义登录流程",
        "description": null,
        "content": "### 前言\n\n自定义登录流程是整合 SpringSecurity 开发必不可少的一步。[上篇文章](https://juejin.cn/post/7227020874888331324)我们介绍了整合数据库的登录，本篇文章在此基础上整理了 SpringSecurity + JWT + Redis 的登录流程。\n\n### 整体流程图\n\n登录及认证的整体流程如下图：\n\n![1683127723301-5c233af9-3c04-4e44-bada-a805cb4d73aa.png](https://pic.code-nav.cn/post_picture/1626574509983178753/uL6iuM5N-1683127723301-5c233af9-3c04-4e44-bada-a805cb4d73aa.png)\n\n### 依赖\n\n除了 SpringSecurity 的相关依赖外，还需要 Redis 和 hutool （强大且全面的工具包，本篇文章中 JWT 的相关类也来自该包） 的依赖。\n\n```xml\n<!-- springboot整合的redis依赖，里面集成了 spring-data-redis -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n<dependency>\n    <groupId>cn.hutool</groupId>\n    <artifactId>hutool-all</artifactId>\n    <version>5.8.13</version>\n</dependency>\n```\n\n### 配置\n\n在整个流程中，我们用到了 SpringSecurity + JWT + Redis ，需要配置的是SpringSecurity 和 Redis。\n\n##### SpringSecurity 配置\n\n```java\n@Configuration\npublic class SpringSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Resource\n    private JwtFilter jwtFilter;\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    /**\n     * 注入 AuthenticationManager 对象，用于调用认证方法\n     *\n     * @return\n     * @throws Exception\n     */\n    @Bean\n    @Override\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n\n    /**\n     * 放行登录接口\n     */\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                // 关闭csrf\n                .csrf().disable()\n                // 不通过Session获取SecurityContext\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and()\n                // 把jwt过滤器放到UsernamePasswordAuthenticationFilter前,便于先判断用户是否登录,再决定是否登录\n                .authorizeRequests()\n                // 对于登录接口允许匿名访问\n                .antMatchers(\"/user/login\").anonymous()\n                // 除上面外的所有请求全部需要鉴权认证\n                .anyRequest().authenticated();\n        http.addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);\n\n    }\n\n}\n\n```\n\n在配置类中，我们注入了 AuthenticationManager 对象。这个对象在上篇文章我们提到过，用于调用认证方法。但是在父类 WebSecurityConfigurerAdapter 中并没有将它注入到容器中，而我们又需要在自己的登录接口中调用它，因此需要重写 authenticationManagerBean 方法并将返回的对象注入到容器中。\nconfigure(HttpSecurity http) 方法用于配置路由，只开放登录接口，其他接口都需要认证。\n\n##### Redis配置\n\n```java\n@Configuration\npublic class RedisConfig {\n\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(LettuceConnectionFactory lettuceConnectionFactory) {\n        // 设置序列化\n        Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<Object>(\n                Object.class);\n        ObjectMapper om = new ObjectMapper();\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        om.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n        jackson2JsonRedisSerializer.setObjectMapper(om);\n        // 配置redisTemplate\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<String, Object>();\n        redisTemplate.setConnectionFactory(lettuceConnectionFactory);\n        RedisSerializer<?> stringSerializer = new StringRedisSerializer();\n        redisTemplate.setKeySerializer(stringSerializer);// key序列化\n        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);// value序列化\n        redisTemplate.setHashKeySerializer(stringSerializer);// Hash key序列化\n        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);// Hash value序列化\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n}\n\n\n```\n\n在 Redis 配置中大部分是常规的序列化配置，特殊的是 ObjectMapper ，这个配置是为因为存储在 Redis 的实体类中除了成员变量的 get 方法外，其他方法不能有返回值，否则会导致反序列化异常，而 ObjectMapper 就是为了解决这个问题。\n反序列化异常的问题可以通过下面的代码验证\n\n```java\n@Test\npublic void test(){\n    RedisTestEntity entity = new RedisTestEntity();\n    entity.setName(\"111\");\n    redisTemplate.opsForValue().set(\"name\", entity);\n}\n\n@Test\npublic void get(){\n    Object name = redisTemplate.opsForValue().get(\"name\");\n    System.out.println(name);\n}\n\n@Data\npublic class RedisTestEntity {\n    private String name;\n\n    public Integer requireAge(){\n        return 18;\n    }\n}\n```\n\n### 定义登录接口\n\n##### 参数的接收\n\n```java\n@Data\npublic class UserLogin {\n    private String username;\n    private String password;\n}\n```\n\n##### controller部分\n\n```java\n@PostMapping(\"/login\")\npublic R<String> login(@RequestBody UserLogin userLogin){\n    String jwt = securityService.login(userLogin);\n    return R.success().data(jwt);\n}\n```\n\ncontroller 只是负责匹配路由和返回数据，业务通过 service 的相关方法完成，因此 controller 中没有太多代码\n\n##### service部分\n\n```java\n@Resource\nprivate AuthenticationManager manager;\n@Resource\nprivate RedisTemplate redisTemplate;\n@Override\npublic String login(UserLogin userLogin) {\n    Authentication userAuthentication = new UsernamePasswordAuthenticationToken(userLogin.getUsername(), userLogin.getPassword());\n    Authentication authenticate = manager.authenticate(userAuthentication);\n    // 如果认证成功则进入生成token的逻辑\n    if (authenticate.isAuthenticated()) {\n        LoginUser loginUser = (LoginUser) authenticate.getPrincipal();\n        SysUser user = loginUser.getUser();\n        // 将登录成功的对象存入redis\n        redisTemplate.opsForValue().set(KeyUtil.getLoginUserKey(user.getUserId()), loginUser);\n        // 生成token\n        String token = JWT\n                .create()\n                .setPayload(userLoginId, user.getUserId())\n                // (签发时间)---------(生效时间)---------(当前时间)---------(失效时间)\n                .setIssuedAt(new Date())\n                // 过期时间七天\n                .setExpiresAt(new Date(System.currentTimeMillis() + DateUnit.WEEK.getMillis()))\n                // // 设置HS256为加密算法，以用户的密码为盐（密钥）\n                .setSigner(\"HMD5\", salt.getBytes(StandardCharsets.UTF_8))\n                .sign();\n\n        return token;\n    }\n    throw new RuntimeException(\"用户名或密码错误\");\n}\n```\n\nservice 完成了登录的主要流程，包括：\n\n1. 调用 AuthenticationManager 实例的 authenticate 方法对用户的账号密码进行验证，该方法会调用到我们上篇文章自定义的方法，通过查询数据库的数据完成校验\n2. 如果校验成功，则将用户信息存入 Redis 并生成相应 token ，同时将用户 id 存入 token 的荷载中，失败则抛出异常\n\n### 登录过滤器\n\n完成登录后，在以后的每次请求都需要在请求头中带上 token 以便于认证，认证操作通过过滤器完成（关于 jwt 的具体知识本篇文章不做探讨，不熟悉请自行查阅相关资料）。\n\n```java\n@Component\npublic class JwtFilter extends OncePerRequestFilter {\n\n    @Resource\n    private RedisTemplate redisTemplate;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        String token = request.getHeader(\"token\");\n        // 没有token，去走登录流程\n        if (StrUtil.isBlank(token)) {\n            filterChain.doFilter(request, response);\n            return;\n        }\n        // token不能为空\n        JWT jwt = JWTUtil.parseToken(token);\n        // 验证token是否合法\n        HMacJWTSigner singer = new HMacJWTSigner(AlgorithmUtil.getAlgorithm(\"HMD5\"), salt.getBytes(StandardCharsets.UTF_8));\n        boolean common = jwt.verify(singer);\n        // 验证时间，失败会抛出异常\n        try {\n            JWTValidator.of(jwt).validateDate(DateUtil.date());\n        } catch (ValidateException exception) {\n            throw new TokenInvalidException(\"token异常\");\n        }\n        if (common){\n            NumberWithFormat userIdObj = (NumberWithFormat)jwt.getPayload(userLoginId);\n            Integer userId = userIdObj.intValue();\n            LoginUser loginUser = (LoginUser) redisTemplate.opsForValue().get(KeyUtil.getLoginUserKey(userId));\n            // 如果用户不存在，说明token异常\n            if (loginUser == null) {\n                throw new TokenInvalidException(\"token异常\");\n            }\n\n            // 将用户信息存入 SecurityContextHolder ，以便本次在请求中使用\n            UsernamePasswordAuthenticationToken authenticationLoginUser = new UsernamePasswordAuthenticationToken(loginUser, null, null);\n            SecurityContextHolder.getContext().setAuthentication(authenticationLoginUser);\n\n            filterChain.doFilter(request, response);\n        }\n\n    }\n}\n```\n\n我们自定义的过滤器类继承了 OncePerRequestFilter 类并重写了 doFilterInternal 方法，然后在 SpringSecurity 的配置类中将其添加到 UsernamePasswordAuthenticationFilter 前面（校验账号密码之前），对应配置类中的如下代码\n\n```java\nhttp.addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);\n```\n\n在过滤器中，我们首先校验了 token 是否存在。如果不存在则直接放行，然后在后续校验权限时会被自动拦截下来。存在则验证 token 的合法性，通过后从 token 拿到用户 id ，从 Redis 中获取到用户信息，如果不存在说明用户的登录状态异常（可能是退出了登录状态，后文会说）。从 Redis 中取到用户信息后，就可以将用户信息存到 SecurityContextHolder 中，方便后续进行认证、授权以及使用。最后放行，执行后续操作。\n\n### 退出登录\n\n在做完前面的操作后，退出登录的操作就很简单了。\n\n```java\n@PostMapping(\"/logout\")\npublic R<String> logout(){\n    Boolean delete = securityService.logout();\n    return R.success().data(delete);\n}\n```\n\n```java\n@Override\npublic Boolean logout() {\n    LoginUser loginUser = (LoginUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n    Integer userId = loginUser.getUser().getUserId();\n    Boolean delete = redisTemplate.delete(KeyUtil.getLoginUserKey(userId));\n    return delete;\n}\n```\n\ncontroller 和 service 的代码分别如图。\n在 service 中我们删除了 Redis 中的用户信息，这也就解释了为什么过滤器中会存在 token 合法但是用户信息不存在的情况（退出登录），当然也可能有其它的特殊情况。\n\n### 结语\n\n本篇文章就到这了，下一篇应该是关于授权的内容，我们下次再见。",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 47,
        "thumbNum": 2,
        "favourNum": 3,
        "commentNum": 0,
        "priority": 0,
        "userId": "1626574509983178753",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-05-05T13:35:26.000+00:00",
        "updateTime": "2023-05-08T06:03:43.000+00:00",
        "user": {
          "id": "1626574509983178753",
          "planetCode": "452",
          "userName": "松柏",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1626574509983178753/ExDo1T3f-wallhaven-72rxqo.jpg",
          "gender": 1,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-02-20T11:07:05.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-02-17T13:29:18.000+00:00",
          "updateTime": "2023-05-07T07:29:13.000+00:00"
        },
        "tags": [
          "文章",
          "Java",
          "Redis"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1654479553654992898",
        "title": "初识 Spring Security",
        "description": null,
        "content": "### 前言\n\nSpring Security 是什么呢，在官网里时这样描述的\n\n> Spring Security是一个框架，提供 认证（authentication）、授权（authorization） 和 保护，以抵御常见的攻击。它对保护命令式和响应式应用程序有一流的支持，是保护基于Spring的应用程序的事实标准。\n\n简而言之就是一个安全框架，能够很好的保护我们的 Spring 应用\n\n### Spring Security执行流程（简化）\n\n\n![image.png](https://pic.code-nav.cn/post_picture/1626574509983178753/NDLHc9LJ-image.png)\n（图来自B站：三更草堂）\n从图中可以看到，用户输入的用户名密码会被一路传到 DaoAuthenticationProvider（后文简称 DAP ）， 然后由 InMemoryUserDetailsManager （实现了 UserDetailsService 接口）根据用户名从内存中查找到对应的用户信息并返回给 DAP 。 DAP 将查到的信息与用户输入的信息进行比对，如果正确则返回并存储认证对象（没有json返回值）。\n\n### 整合数据库\n\n上面提到，Spring Security 默认是在内存中查找用户信息，这是不符合我们实际开发的场景的。我们需要从数据库中查到真实的用户信息。\n这时候就需要用到 UserDetailsService 接口，因为最后查找用户的操作是由该接口定义的，我们只需要实现该接口并实现 loadUserByUsername 方法，即可实现从数据库中查找用户信息。\n\n```java\n    @Resource\n    private SysUserService sysUserService;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        SysUser user = sysUserService.getUserByUserName(username);\n        if (user == null) {\n            throw new RuntimeException(\"账号或密码错误\");\n        }\n        LoginUser loginUser = new LoginUser(user);\n        return loginUser;\n    }\n```\n\nloadUserByUsername 方法要求返回的 UserDeatils 对象是 Spring Security 的内置用户对象，我们可以通过组合的方式将查出的用户封装为 UserDeatils 对象。\n\n```java\npackage com.cowz.databasedemo.entity.security;\n\nimport com.cowz.databasedemo.entity.SysUser;\nimport lombok.AllArgsConstructor;\nimport lombok.NoArgsConstructor;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\n\nimport java.util.Collection;\n\n@NoArgsConstructor\n@AllArgsConstructor\npublic class LoginUser implements UserDetails {\n\n    private SysUser user;\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return null;\n    }\n\n    @Override\n    public String getPassword() {\n        return user.getPassword();\n    }\n\n    @Override\n    public String getUsername() {\n        return user.getUsername();\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}\n\n```\n\n其中 SysUser 就是我们系统中的用户对象。\n\n### 密码加密器\n\n做完以上操作在进行测试时，会报一个异常\n\n```java\njava.lang.IllegalArgumentException:There is no PasswordEncoder mapped for the id \"null\"\n```\n\n这是由于没有配置密码加密器所引起的，密码加密器确保我们的密码在数据库中是以密文而不是明文存储的。为此我们需要进行以下的配置\n\n```java\n@Configuration\npublic class SpringSecurityConfig {\n\n    @Bean\n    public PasswordEncoder passwordEncoder(){\n        return new BCryptPasswordEncoder();\n    }\n}\n```\n\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 20,
        "thumbNum": 3,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1626574509983178753",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-05-05T13:33:59.000+00:00",
        "updateTime": "2023-05-08T02:54:59.000+00:00",
        "user": {
          "id": "1626574509983178753",
          "planetCode": "452",
          "userName": "松柏",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1626574509983178753/ExDo1T3f-wallhaven-72rxqo.jpg",
          "gender": 1,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": null,
          "birthday": null,
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": null,
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 0,
          "followNum": 0,
          "followStatus": null,
          "vipExpireTime": "2024-02-20T11:07:05.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-02-17T13:29:18.000+00:00",
          "updateTime": "2023-05-07T07:29:13.000+00:00"
        },
        "tags": [
          "文章",
          "Spring",
          "后端",
          "安全"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      }
    ],
    "total": "6661",
    "size": "10",
    "current": "1",
    "orders": [],
    "optimizeCountSql": true,
    "searchCount": true,
    "countId": null,
    "maxLimit": null,
    "pages": "667"
  },
  "message": "ok"
}